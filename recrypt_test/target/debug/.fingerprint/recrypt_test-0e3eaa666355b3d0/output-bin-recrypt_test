{"message":"unused import: `recrypt::api::*`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/main.rs","byte_start":95,"byte_end":110,"line_start":5,"line_end":5,"column_start":5,"column_end":20,"is_primary":true,"text":[{"text":"use recrypt::api::*;","highlight_start":5,"highlight_end":20}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_imports)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":91,"byte_end":111,"line_start":5,"line_end":5,"column_start":1,"column_end":21,"is_primary":true,"text":[{"text":"use recrypt::api::*;","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `recrypt::api::*`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:5:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m5\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse recrypt::api::*;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unused_imports)]` on by default\u001b[0m\n\n"}
{"message":"field `bytes` of struct `recrypt::api::Plaintext` is private","code":{"code":"E0616","explanation":"Attempted to access a private field on a struct.\n\nErroneous code example:\n\n```compile_fail,E0616\nmod some_module {\n    pub struct Foo {\n        x: u32, // So `x` is private in here.\n    }\n\n    impl Foo {\n        pub fn new() -> Foo { Foo { x: 0 } }\n    }\n}\n\nlet f = some_module::Foo::new();\nprintln!(\"{}\", f.x); // error: field `x` of struct `some_module::Foo` is private\n```\n\nIf you want to access this field, you have two options:\n\n1) Set the field public:\n\n```\nmod some_module {\n    pub struct Foo {\n        pub x: u32, // `x` is now public.\n    }\n\n    impl Foo {\n        pub fn new() -> Foo { Foo { x: 0 } }\n    }\n}\n\nlet f = some_module::Foo::new();\nprintln!(\"{}\", f.x); // ok!\n```\n\n2) Add a getter function:\n\n```\nmod some_module {\n    pub struct Foo {\n        x: u32, // So `x` is still private in here.\n    }\n\n    impl Foo {\n        pub fn new() -> Foo { Foo { x: 0 } }\n\n        // We create the getter function here:\n        pub fn get_x(&self) -> &u32 { &self.x }\n    }\n}\n\nlet f = some_module::Foo::new();\nprintln!(\"{}\", f.get_x()); // ok!\n```\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":534,"byte_end":539,"line_start":21,"line_end":21,"column_start":19,"column_end":24,"is_primary":true,"text":[{"text":"    let key = &pt.bytes[0..16];","highlight_start":19,"highlight_end":24}],"label":"private field","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"a method `bytes` also exists, call it with parentheses","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":539,"byte_end":539,"line_start":21,"line_end":21,"column_start":24,"column_end":24,"is_primary":true,"text":[{"text":"    let key = &pt.bytes[0..16];","highlight_start":24,"highlight_end":24}],"label":null,"suggested_replacement":"()","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0616]\u001b[0m\u001b[0m\u001b[1m: field `bytes` of struct `recrypt::api::Plaintext` is private\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:21:19\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m21\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let key = &pt.bytes[0..16];\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mprivate field\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: a method `bytes` also exists, call it with parentheses\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m21\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    let key = &pt.bytes\u001b[0m\u001b[0m\u001b[38;5;10m()\u001b[0m\u001b[0m[0..16];\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[38;5;10m++\u001b[0m\n\n"}
{"message":"the function or associated item `new_var` exists for struct `Ecb<Aes128, Pkcs7>`, but its trait bounds were not satisfied","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":708,"byte_end":715,"line_start":27,"line_end":27,"column_start":29,"column_end":36,"is_primary":true,"text":[{"text":"    let cipher = Aes128Ecb::new_var(key, Default::default()).unwrap();","highlight_start":29,"highlight_end":36}],"label":"function or associated item cannot be called on `Ecb<Aes128, Pkcs7>` due to unsatisfied trait bounds","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/aes-0.8.2/src/autodetect.rs","byte_start":1498,"byte_end":1607,"line_start":52,"line_end":55,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        pub struct $name {","highlight_start":9,"highlight_end":27},{"text":"            inner: $module::Inner,","highlight_start":1,"highlight_end":35},{"text":"            token: aes_intrinsics::InitToken,","highlight_start":1,"highlight_end":46},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":"doesn't satisfy `Aes128: NewBlockCipher`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/aes-0.8.2/src/autodetect.rs","byte_start":13546,"byte_end":13616,"line_start":428,"line_end":428,"column_start":1,"column_end":71,"is_primary":false,"text":[{"text":"define_aes_impl!(Aes128, Aes128Enc, Aes128Dec, aes128, U16, \"AES-128\");","highlight_start":1,"highlight_end":71}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"define_aes_impl!","def_site_span":{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/aes-0.8.2/src/autodetect.rs","byte_start":562,"byte_end":590,"line_start":21,"line_end":21,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"macro_rules! define_aes_impl {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/aes-0.8.2/src/autodetect.rs","byte_start":1498,"byte_end":1607,"line_start":52,"line_end":55,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        pub struct $name {","highlight_start":9,"highlight_end":27},{"text":"            inner: $module::Inner,","highlight_start":1,"highlight_end":35},{"text":"            token: aes_intrinsics::InitToken,","highlight_start":1,"highlight_end":46},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":"doesn't satisfy `Aes128: block_modes::cipher::BlockCipher`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/aes-0.8.2/src/autodetect.rs","byte_start":13546,"byte_end":13616,"line_start":428,"line_end":428,"column_start":1,"column_end":71,"is_primary":false,"text":[{"text":"define_aes_impl!(Aes128, Aes128Enc, Aes128Dec, aes128, U16, \"AES-128\");","highlight_start":1,"highlight_end":71}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"define_aes_impl!","def_site_span":{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/aes-0.8.2/src/autodetect.rs","byte_start":562,"byte_end":590,"line_start":21,"line_end":21,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"macro_rules! define_aes_impl {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/block-modes-0.7.0/src/ecb.rs","byte_start":593,"byte_end":649,"line_start":17,"line_end":17,"column_start":1,"column_end":57,"is_primary":false,"text":[{"text":"pub struct Ecb<C: BlockCipher + BlockCipher, P: Padding> {","highlight_start":1,"highlight_end":57}],"label":"doesn't satisfy `Ecb<Aes128, Pkcs7>: BlockMode<Aes128, Pkcs7>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following trait bounds were not satisfied:\n`Aes128: block_modes::cipher::BlockCipher`\nwhich is required by `Ecb<Aes128, Pkcs7>: BlockMode<Aes128, Pkcs7>`\n`Aes128: NewBlockCipher`\nwhich is required by `Ecb<Aes128, Pkcs7>: BlockMode<Aes128, Pkcs7>`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m: the function or associated item `new_var` exists for struct `Ecb<Aes128, Pkcs7>`, but its trait bounds were not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:27:29\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m27\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let cipher = Aes128Ecb::new_var(key, Default::default()).unwrap();\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mfunction or associated item cannot be called on `Ecb<Aes128, Pkcs7>` due to unsatisfied trait bounds\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/aes-0.8.2/src/autodetect.rs:428:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m428\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mdefine_aes_impl!(Aes128, Aes128Enc, Aes128Dec, aes128, U16, \"AES-128\");\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------------------------------------------------------------\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mdoesn't satisfy `Aes128: NewBlockCipher`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mdoesn't satisfy `Aes128: block_modes::cipher::BlockCipher`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/block-modes-0.7.0/src/ecb.rs:17:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m17\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Ecb<C: BlockCipher + BlockCipher, P: Padding> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mdoesn't satisfy `Ecb<Aes128, Pkcs7>: BlockMode<Aes128, Pkcs7>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the following trait bounds were not satisfied:\u001b[0m\n\u001b[0m            `Aes128: block_modes::cipher::BlockCipher`\u001b[0m\n\u001b[0m            which is required by `Ecb<Aes128, Pkcs7>: BlockMode<Aes128, Pkcs7>`\u001b[0m\n\u001b[0m            `Aes128: NewBlockCipher`\u001b[0m\n\u001b[0m            which is required by `Ecb<Aes128, Pkcs7>: BlockMode<Aes128, Pkcs7>`\u001b[0m\n\n"}
{"message":"the trait bound `Aes128: block_modes::cipher::BlockCipher` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":697,"byte_end":706,"line_start":27,"line_end":27,"column_start":18,"column_end":27,"is_primary":true,"text":[{"text":"    let cipher = Aes128Ecb::new_var(key, Default::default()).unwrap();","highlight_start":18,"highlight_end":27}],"label":"the trait `block_modes::cipher::BlockCipher` is not implemented for `Aes128`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the trait `block_modes::cipher::BlockCipher` is implemented for `&Alg`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `Ecb`","code":null,"level":"note","spans":[{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/block-modes-0.7.0/src/ecb.rs","byte_start":611,"byte_end":622,"line_start":17,"line_end":17,"column_start":19,"column_end":30,"is_primary":true,"text":[{"text":"pub struct Ecb<C: BlockCipher + BlockCipher, P: Padding> {","highlight_start":19,"highlight_end":30}],"label":"required by this bound in `Ecb`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `Aes128: block_modes::cipher::BlockCipher` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:27:18\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m27\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let cipher = Aes128Ecb::new_var(key, Default::default()).unwrap();\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `block_modes::cipher::BlockCipher` is not implemented for `Aes128`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the trait `block_modes::cipher::BlockCipher` \u001b[0m\u001b[0m\u001b[1mis\u001b[0m\u001b[0m implemented for `\u001b[0m\u001b[0m\u001b[1m&Alg\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `Ecb`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/block-modes-0.7.0/src/ecb.rs:17:19\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m17\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Ecb<C: BlockCipher + BlockCipher, P: Padding> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `Ecb`\u001b[0m\n\n"}
{"message":"the function or associated item `new_var` exists for struct `Ecb<Aes128, Pkcs7>`, but its trait bounds were not satisfied","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":1624,"byte_end":1631,"line_start":52,"line_end":52,"column_start":29,"column_end":36,"is_primary":true,"text":[{"text":"    let cipher = Aes128Ecb::new_var(key, Default::default()).unwrap();","highlight_start":29,"highlight_end":36}],"label":"function or associated item cannot be called on `Ecb<Aes128, Pkcs7>` due to unsatisfied trait bounds","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/aes-0.8.2/src/autodetect.rs","byte_start":1498,"byte_end":1607,"line_start":52,"line_end":55,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        pub struct $name {","highlight_start":9,"highlight_end":27},{"text":"            inner: $module::Inner,","highlight_start":1,"highlight_end":35},{"text":"            token: aes_intrinsics::InitToken,","highlight_start":1,"highlight_end":46},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":"doesn't satisfy `Aes128: NewBlockCipher`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/aes-0.8.2/src/autodetect.rs","byte_start":13546,"byte_end":13616,"line_start":428,"line_end":428,"column_start":1,"column_end":71,"is_primary":false,"text":[{"text":"define_aes_impl!(Aes128, Aes128Enc, Aes128Dec, aes128, U16, \"AES-128\");","highlight_start":1,"highlight_end":71}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"define_aes_impl!","def_site_span":{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/aes-0.8.2/src/autodetect.rs","byte_start":562,"byte_end":590,"line_start":21,"line_end":21,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"macro_rules! define_aes_impl {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/aes-0.8.2/src/autodetect.rs","byte_start":1498,"byte_end":1607,"line_start":52,"line_end":55,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        pub struct $name {","highlight_start":9,"highlight_end":27},{"text":"            inner: $module::Inner,","highlight_start":1,"highlight_end":35},{"text":"            token: aes_intrinsics::InitToken,","highlight_start":1,"highlight_end":46},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":"doesn't satisfy `Aes128: block_modes::cipher::BlockCipher`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/aes-0.8.2/src/autodetect.rs","byte_start":13546,"byte_end":13616,"line_start":428,"line_end":428,"column_start":1,"column_end":71,"is_primary":false,"text":[{"text":"define_aes_impl!(Aes128, Aes128Enc, Aes128Dec, aes128, U16, \"AES-128\");","highlight_start":1,"highlight_end":71}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"define_aes_impl!","def_site_span":{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/aes-0.8.2/src/autodetect.rs","byte_start":562,"byte_end":590,"line_start":21,"line_end":21,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"macro_rules! define_aes_impl {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/block-modes-0.7.0/src/ecb.rs","byte_start":593,"byte_end":649,"line_start":17,"line_end":17,"column_start":1,"column_end":57,"is_primary":false,"text":[{"text":"pub struct Ecb<C: BlockCipher + BlockCipher, P: Padding> {","highlight_start":1,"highlight_end":57}],"label":"doesn't satisfy `Ecb<Aes128, Pkcs7>: BlockMode<Aes128, Pkcs7>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following trait bounds were not satisfied:\n`Aes128: block_modes::cipher::BlockCipher`\nwhich is required by `Ecb<Aes128, Pkcs7>: BlockMode<Aes128, Pkcs7>`\n`Aes128: NewBlockCipher`\nwhich is required by `Ecb<Aes128, Pkcs7>: BlockMode<Aes128, Pkcs7>`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m: the function or associated item `new_var` exists for struct `Ecb<Aes128, Pkcs7>`, but its trait bounds were not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:52:29\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m52\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let cipher = Aes128Ecb::new_var(key, Default::default()).unwrap();\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mfunction or associated item cannot be called on `Ecb<Aes128, Pkcs7>` due to unsatisfied trait bounds\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/aes-0.8.2/src/autodetect.rs:428:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m428\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mdefine_aes_impl!(Aes128, Aes128Enc, Aes128Dec, aes128, U16, \"AES-128\");\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------------------------------------------------------------\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mdoesn't satisfy `Aes128: NewBlockCipher`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mdoesn't satisfy `Aes128: block_modes::cipher::BlockCipher`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/block-modes-0.7.0/src/ecb.rs:17:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m17\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Ecb<C: BlockCipher + BlockCipher, P: Padding> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mdoesn't satisfy `Ecb<Aes128, Pkcs7>: BlockMode<Aes128, Pkcs7>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the following trait bounds were not satisfied:\u001b[0m\n\u001b[0m            `Aes128: block_modes::cipher::BlockCipher`\u001b[0m\n\u001b[0m            which is required by `Ecb<Aes128, Pkcs7>: BlockMode<Aes128, Pkcs7>`\u001b[0m\n\u001b[0m            `Aes128: NewBlockCipher`\u001b[0m\n\u001b[0m            which is required by `Ecb<Aes128, Pkcs7>: BlockMode<Aes128, Pkcs7>`\u001b[0m\n\n"}
{"message":"the trait bound `Aes128: block_modes::cipher::BlockCipher` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":1613,"byte_end":1622,"line_start":52,"line_end":52,"column_start":18,"column_end":27,"is_primary":true,"text":[{"text":"    let cipher = Aes128Ecb::new_var(key, Default::default()).unwrap();","highlight_start":18,"highlight_end":27}],"label":"the trait `block_modes::cipher::BlockCipher` is not implemented for `Aes128`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the trait `block_modes::cipher::BlockCipher` is implemented for `&Alg`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `Ecb`","code":null,"level":"note","spans":[{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/block-modes-0.7.0/src/ecb.rs","byte_start":611,"byte_end":622,"line_start":17,"line_end":17,"column_start":19,"column_end":30,"is_primary":true,"text":[{"text":"pub struct Ecb<C: BlockCipher + BlockCipher, P: Padding> {","highlight_start":19,"highlight_end":30}],"label":"required by this bound in `Ecb`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `Aes128: block_modes::cipher::BlockCipher` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:52:18\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m52\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let cipher = Aes128Ecb::new_var(key, Default::default()).unwrap();\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `block_modes::cipher::BlockCipher` is not implemented for `Aes128`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the trait `block_modes::cipher::BlockCipher` \u001b[0m\u001b[0m\u001b[1mis\u001b[0m\u001b[0m implemented for `\u001b[0m\u001b[0m\u001b[1m&Alg\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `Ecb`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/block-modes-0.7.0/src/ecb.rs:17:19\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m17\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Ecb<C: BlockCipher + BlockCipher, P: Padding> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `Ecb`\u001b[0m\n\n"}
{"message":"unused import: `BlockMode`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/main.rs","byte_start":147,"byte_end":156,"line_start":7,"line_end":7,"column_start":19,"column_end":28,"is_primary":true,"text":[{"text":"use block_modes::{BlockMode, Ecb};","highlight_start":19,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `BlockMode`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:7:19\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m7\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse block_modes::{BlockMode, Ecb};\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\n\n"}
{"message":"aborting due to 5 previous errors; 2 warnings emitted","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 5 previous errors; 2 warnings emitted\u001b[0m\n\n"}
{"message":"Some errors have detailed explanations: E0277, E0599, E0616.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mSome errors have detailed explanations: E0277, E0599, E0616.\u001b[0m\n"}
{"message":"For more information about an error, try `rustc --explain E0277`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about an error, try `rustc --explain E0277`.\u001b[0m\n"}
